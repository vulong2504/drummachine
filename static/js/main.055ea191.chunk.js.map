{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","id","letter","src","DrumPad","handleKeydown","event","keyCode","props","charCodeAt","audio","play","handleDisplay","handleClick","document","addEventListener","this","removeEventListener","className","onClick","style","ref","React","Component","App","display","setState","state","marginBottom","textAlign","Container","maxWidth","padding","marginTop","borderRadius","background","fontSize","Grid","container","spacing","map","d","item","xs","justify","alignItems","width","Button","variant","color","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAUIA,EAAO,CACT,CAAEC,GAAI,WAAYC,OAAQ,IAAKC,IAAK,4DACpC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,4DACpC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,4DACpC,CAAEF,GAAI,aAAcC,OAAQ,IAAKC,IAAK,8DACtC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,4DACpC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,0DAClC,CAAEF,GAAI,aAAcC,OAAQ,IAAKC,IAAK,8DACtC,CAAEF,GAAI,aAAcC,OAAQ,IAAKC,IAAK,8DACtC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,2DAG9BC,E,2MAUJC,cAAgB,SAAAC,GACVA,EAAMC,UAAY,EAAKC,MAAMN,OAAOO,eACtC,EAAKC,MAAMC,OAEX,EAAKH,MAAMI,cAAc,EAAKJ,MAAMP,M,EAIxCY,YAAc,WACZ,EAAKH,MAAMC,OAEX,EAAKH,MAAMI,cAAc,EAAKJ,MAAMP,K,mFAnBpCa,SAASC,iBAAiB,UAAWC,KAAKX,iB,6CAK1CS,SAASG,oBAAoB,UAAWD,KAAKX,iB,+BAiBrC,IAAD,OACP,OACE,yBACEa,UAAU,WACVjB,GAAIe,KAAKR,MAAMP,GACfkB,QAASH,KAAKH,aAEd,wBAAIO,MAAO,IAAKJ,KAAKR,MAAMN,QAC3B,2BAAOD,GAAIe,KAAKR,MAAMN,OACpBgB,UAAU,OACVf,IAAKa,KAAKR,MAAML,IAChBkB,IAAK,SAAAA,GAAG,OAAI,EAAKX,MAAQW,U,GAnCbC,IAAMC,WAwFbC,E,YA7Cb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRI,cAAgB,SAAAa,GAAO,OAAI,EAAKC,SAAS,CAAED,aALzC,EAAKE,MAAQ,CACXF,QAAS,wBAHM,E,sEAST,IAAD,OACP,OACE,yBAAKxB,GAAG,eAAemB,MAAO,CAACQ,aAAa,SAC1C,wBAAIR,MAAO,CAACS,UAAU,WAAtB,gBADF,IACqD,uBAAGT,MAAO,CAACS,UAAU,WAArB,cACnD,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKX,MAAO,CAAEY,QAAQ,OAAQC,UAAW,OAAQC,aAAc,OAAQC,WAAY,YAErG,yBAAKlC,GAAG,UAAUmB,MAAO,CAACS,UAAU,SAAUD,aAAa,OAAOQ,SAAS,SAAUpB,KAAKW,MAAMF,SAEhG,yBAAKP,UAAU,aAEX,kBAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBvC,EAAKwC,KAAI,SAAAC,GAAC,OACX,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAIL,WAAS,EAACM,QAAQ,SAASC,WAAW,SACxDzB,MAAO,CAAC0B,MAAM,SACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAChC,kBAAC,EAAD,CACEC,IAAKT,EAAExC,GACPA,GAAIwC,EAAExC,GACNC,OAAQuC,EAAEvC,OACVC,IAAKsC,EAAEtC,IACPS,cAAe,EAAKA,6B,GA9BxBU,IAAMC,WCpDJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.055ea191.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\n\n\n\n\nlet data = [\n  { id: \"Heater-1\", letter: 'Q', src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" },\n  { id: \"Heater-2\", letter: 'W', src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" },\n  { id: \"Heater-3\", letter: 'E', src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" },\n  { id: 'Heater-4_1', letter: 'A', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\n  { id: 'Heater-6', letter: 'S', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\n  { id: 'Dsc_Oh', letter: 'D', src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\n  { id: 'Kick_n_Hat', letter: 'Z', src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\n  { id: 'RP4_KICK_1', letter: 'X', src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3' },\n  { id: 'Cev_H2', letter: 'C', src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' }\n];\n\nclass DrumPad extends React.Component {\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeydown)\n\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeydown)\n  }\n\n  handleKeydown = event => {\n    if (event.keyCode === this.props.letter.charCodeAt()) {\n      this.audio.play()\n\n      this.props.handleDisplay(this.props.id)\n    }\n  }\n\n  handleClick = () => {\n    this.audio.play()\n\n    this.props.handleDisplay(this.props.id)\n  }\n\n  render() {\n    return (\n      <div\n        className='drum-pad'\n        id={this.props.id}\n        onClick={this.handleClick}\n      >\n        <h1 style={{}}>{this.props.letter}</h1>\n        <audio id={this.props.letter}\n          className='clip'\n          src={this.props.src}\n          ref={ref => this.audio = ref}\n        ></audio>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      display: 'Click or Press a Key'\n    }\n  }\n\n  handleDisplay = display => this.setState({ display })\n\n  render() {\n    return (\n      <div id='drum-machine' style={{marginBottom:\"30px\"}}>\n        <h1 style={{textAlign:\"center\"}}>DRUM MACHINE</h1> <p style={{textAlign:\"center\"}}>by Vu Long</p>\n        <Container maxWidth=\"sm\" style={{ padding:\"20px\", marginTop: \"50px\", borderRadius: \"10px\", background: \"#ffcccc\" }}>\n\n          <div id='display' style={{textAlign:\"center\", marginBottom:\"20px\",fontSize:\"40px\"}}>{this.state.display}</div>\n\n          <div className='drum-pads'>\n\n              <Grid container spacing={3}>\n                {data.map(d => (\n                <Grid item xs={4}  container justify=\"center\" alignItems=\"center\" \n                 style={{width:\"auto\"}}>\n                  <Button variant=\"contained\" color=\"primary\">\n                    <DrumPad\n                      key={d.id}\n                      id={d.id}\n                      letter={d.letter}\n                      src={d.src}\n                      handleDisplay={this.handleDisplay}\n                    />\n                  </Button>\n                </Grid>\n                ))}\n              </Grid>\n\n          </div>\n\n        </Container>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}